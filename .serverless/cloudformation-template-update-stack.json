{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AuthorizerUnderscoreonlineLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ez-stack-authentication-dev-authorizer_online"
      }
    },
    "PreSignUpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ez-stack-authentication-dev-preSignUp"
      }
    },
    "DefineAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ez-stack-authentication-dev-defineAuthChallenge"
      }
    },
    "CreateAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ez-stack-authentication-dev-createAuthChallenge"
      }
    },
    "VerifyAuthChallengeResponseLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ez-stack-authentication-dev-verifyAuthChallengeResponse"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "ez-stack-authentication",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ez-stack-authentication-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ez-stack-authentication-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "ez-stack-authentication",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AuthorizerUnderscoreonlineLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ez-stack-authentication/dev/1663092656414-2022-09-13T18:10:56.414Z/authorizer_online.zip"
        },
        "Handler": "lambdas/authorizer/online.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "ez-stack-authentication-dev-authorizer_online",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "security authorizer for online cognito access token check",
        "Environment": {
          "Variables": {
            "USER_POOL_ID": [
              {
                "Ref": "CognitoUserPool"
              }
            ],
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AuthorizerUnderscoreonlineLogGroup"
      ]
    },
    "PreSignUpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ez-stack-authentication/dev/1663092656414-2022-09-13T18:10:56.414Z/preSignUp.zip"
        },
        "Handler": "lambdas/cognito/pre-signup.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "ez-stack-authentication-dev-preSignUp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - auto confirm user before signup",
        "Environment": {
          "Variables": {
            "USER_POOL_ID": [
              {
                "Ref": "CognitoUserPool"
              }
            ],
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PreSignUpLogGroup"
      ]
    },
    "DefineAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ez-stack-authentication/dev/1663092656414-2022-09-13T18:10:56.414Z/defineAuthChallenge.zip"
        },
        "Handler": "lambdas/cognito/define-auth-challenge.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "ez-stack-authentication-dev-defineAuthChallenge",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - manage flow of custom auth",
        "Environment": {
          "Variables": {
            "USER_POOL_ID": [
              {
                "Ref": "CognitoUserPool"
              }
            ],
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DefineAuthChallengeLogGroup"
      ]
    },
    "CreateAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ez-stack-authentication/dev/1663092656414-2022-09-13T18:10:56.414Z/createAuthChallenge.zip"
        },
        "Handler": "lambdas/cognito/create-auth-challenge.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "ez-stack-authentication-dev-createAuthChallenge",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - create and email unique OTP",
        "Environment": {
          "Variables": {
            "USER_POOL_ID": [
              {
                "Ref": "CognitoUserPool"
              }
            ],
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateAuthChallengeLogGroup"
      ]
    },
    "VerifyAuthChallengeResponseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ez-stack-authentication/dev/1663092656414-2022-09-13T18:10:56.414Z/verifyAuthChallengeResponse.zip"
        },
        "Handler": "lambdas/cognito/verify-auth-challenge-response.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "ez-stack-authentication-dev-verifyAuthChallengeResponse",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - check if user entered correct OTP",
        "Environment": {
          "Variables": {
            "USER_POOL_ID": [
              {
                "Ref": "CognitoUserPool"
              }
            ],
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyAuthChallengeResponseLogGroup"
      ]
    },
    "AuthorizerUnderscoreonlineLambdaVersion3neFXqOcmTgQXU1VF80y2t1WCYU8bebXc8wZXkWMSjc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthorizerUnderscoreonlineLambdaFunction"
        },
        "CodeSha256": "F85kJApHK5rm/DiXM+igVaW4gCH6CX3kC+fSYWHHdJU=",
        "Description": "security authorizer for online cognito access token check"
      }
    },
    "PreSignUpLambdaVersionKNnjwnKUjceQVNYPvcx8pi4f4wZxA0bPIjHbFUZrQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PreSignUpLambdaFunction"
        },
        "CodeSha256": "ruYTqMhMGSDSVSZet0RbxqvcebxC0HYCXRRBpqZpF94=",
        "Description": "COGNITO - auto confirm user before signup"
      }
    },
    "DefineAuthChallengeLambdaVersionrq0tX7Pj7pbayYUjdMTl8ZxbXbCCSoHvkbaGCPK1Gk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DefineAuthChallengeLambdaFunction"
        },
        "CodeSha256": "ruYTqMhMGSDSVSZet0RbxqvcebxC0HYCXRRBpqZpF94=",
        "Description": "COGNITO - manage flow of custom auth"
      }
    },
    "CreateAuthChallengeLambdaVersionBK6TycLJlSwZZHTMTCR6l7yiMsj18QLA0njjUdK49ww": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateAuthChallengeLambdaFunction"
        },
        "CodeSha256": "ruYTqMhMGSDSVSZet0RbxqvcebxC0HYCXRRBpqZpF94=",
        "Description": "COGNITO - create and email unique OTP"
      }
    },
    "VerifyAuthChallengeResponseLambdaVersion0FuuwzklWbSgKQkat8uwCGEKLFarq7pjgw5us37SqA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyAuthChallengeResponseLambdaFunction"
        },
        "CodeSha256": "ruYTqMhMGSDSVSZet0RbxqvcebxC0HYCXRRBpqZpF94=",
        "Description": "COGNITO - check if user entered correct OTP"
      }
    },
    "CognitoUserPoolEzstackuserpool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "ez-stack-user-pool",
        "LambdaConfig": {
          "PreSignUp": {
            "Fn::GetAtt": [
              "PreSignUpLambdaFunction",
              "Arn"
            ]
          },
          "DefineAuthChallenge": {
            "Fn::GetAtt": [
              "DefineAuthChallengeLambdaFunction",
              "Arn"
            ]
          },
          "CreateAuthChallenge": {
            "Fn::GetAtt": [
              "CreateAuthChallengeLambdaFunction",
              "Arn"
            ]
          },
          "VerifyAuthChallengeResponse": {
            "Fn::GetAtt": [
              "VerifyAuthChallengeResponseLambdaFunction",
              "Arn"
            ]
          }
        }
      },
      "DependsOn": [
        "PreSignUpLambdaFunction",
        "DefineAuthChallengeLambdaFunction",
        "CreateAuthChallengeLambdaFunction",
        "VerifyAuthChallengeResponseLambdaFunction"
      ]
    },
    "PreSignUpLambdaPermissionCognitoUserPoolEzstackuserpoolTriggerSourcePreSignUp": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PreSignUpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolEzstackuserpool",
            "Arn"
          ]
        }
      }
    },
    "DefineAuthChallengeLambdaPermissionCognitoUserPoolEzstackuserpoolTriggerSourceDefineAuthChallenge": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DefineAuthChallengeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolEzstackuserpool",
            "Arn"
          ]
        }
      }
    },
    "CreateAuthChallengeLambdaPermissionCognitoUserPoolEzstackuserpoolTriggerSourceCreateAuthChallenge": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateAuthChallengeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolEzstackuserpool",
            "Arn"
          ]
        }
      }
    },
    "VerifyAuthChallengeResponseLambdaPermissionCognitoUserPoolEzstackuserpoolTriggerSourceVerifyAuthChallengeResponse": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyAuthChallengeResponseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolEzstackuserpool",
            "Arn"
          ]
        }
      }
    },
    "CognitoUserPoolEzStack": {
      "Type": "AWS::Cognito::UserPool",
      "DeletionPolicy": "Retain",
      "Properties": {
        "UserPoolName": "ez-stack-user-pool",
        "UsernameAttributes": [
          "email"
        ],
        "EmailConfiguration": {
          "EmailSendingAccount": "DEVELOPER",
          "From": "no-reply@ayusha.net",
          "SourceArn": "arn:aws:ses:us-east-1:941536852168:identity/ayusha.net"
        }
      }
    },
    "CognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "DeletionPolicy": "Retain",
      "Properties": {
        "ClientName": "user-pool-client-web",
        "SupportedIdentityProviders": [
          "COGNITO"
        ],
        "UserPoolId": {
          "Ref": "CognitoUserPool"
        },
        "ExplicitAuthFlows": [
          "ALLOW_CUSTOM_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH"
        ],
        "GenerateSecret": false
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-ez-stack-authentication-dev-ServerlessDeploymentBucketName"
      }
    },
    "AuthorizerUnderscoreonlineLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthorizerUnderscoreonlineLambdaVersion3neFXqOcmTgQXU1VF80y2t1WCYU8bebXc8wZXkWMSjc"
      },
      "Export": {
        "Name": "sls-ez-stack-authentication-dev-AuthorizerUnderscoreonlineLambdaFunctionQualifiedArn"
      }
    },
    "PreSignUpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PreSignUpLambdaVersionKNnjwnKUjceQVNYPvcx8pi4f4wZxA0bPIjHbFUZrQ"
      },
      "Export": {
        "Name": "sls-ez-stack-authentication-dev-PreSignUpLambdaFunctionQualifiedArn"
      }
    },
    "DefineAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DefineAuthChallengeLambdaVersionrq0tX7Pj7pbayYUjdMTl8ZxbXbCCSoHvkbaGCPK1Gk"
      },
      "Export": {
        "Name": "sls-ez-stack-authentication-dev-DefineAuthChallengeLambdaFunctionQualifiedArn"
      }
    },
    "CreateAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateAuthChallengeLambdaVersionBK6TycLJlSwZZHTMTCR6l7yiMsj18QLA0njjUdK49ww"
      },
      "Export": {
        "Name": "sls-ez-stack-authentication-dev-CreateAuthChallengeLambdaFunctionQualifiedArn"
      }
    },
    "VerifyAuthChallengeResponseLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyAuthChallengeResponseLambdaVersion0FuuwzklWbSgKQkat8uwCGEKLFarq7pjgw5us37SqA"
      },
      "Export": {
        "Name": "sls-ez-stack-authentication-dev-VerifyAuthChallengeResponseLambdaFunctionQualifiedArn"
      }
    },
    "UserPoolId": {
      "Value": {
        "Ref": "CognitoUserPool"
      },
      "Export": {
        "Name": "UserPoolId"
      }
    },
    "UserPoolClientId": {
      "Value": {
        "Ref": "CognitoUserPoolClient"
      }
    }
  },
  "Parameters": {
    "CognitoUserPool": {
      "Type": "String",
      "Default": "us-east-1_nMl2Znmzc"
    }
  }
}